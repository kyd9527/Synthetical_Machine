package de.greenrobot.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.greenrobot.greendao.GoodsInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_INFO".
*/
public class GoodsInfoDao extends AbstractDao<GoodsInfo, Long> {

    public static final String TABLENAME = "GOODS_INFO";

    /**
     * Properties of entity GoodsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GoodsNumber = new Property(1, int.class, "goodsNumber", false, "GOODS_NUMBER");
        public final static Property GoodsStock = new Property(2, int.class, "goodsStock", false, "GOODS_STOCK");
        public final static Property GoodsCapacity = new Property(3, int.class, "goodsCapacity", false, "GOODS_CAPACITY");
        public final static Property GoodsStatus = new Property(4, int.class, "goodsStatus", false, "GOODS_STATUS");
        public final static Property GoodsDisable = new Property(5, int.class, "goodsDisable", false, "GOODS_DISABLE");
        public final static Property GoodsID = new Property(6, long.class, "goodsID", false, "GOODS_ID");
        public final static Property KeyID = new Property(7, long.class, "keyID", false, "KEY_ID");
    };

    private DaoSession daoSession;

    private Query<GoodsInfo> keyInfo_GoodsInfoListQuery;

    public GoodsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GOODS_NUMBER\" INTEGER NOT NULL ," + // 1: goodsNumber
                "\"GOODS_STOCK\" INTEGER NOT NULL ," + // 2: goodsStock
                "\"GOODS_CAPACITY\" INTEGER NOT NULL ," + // 3: goodsCapacity
                "\"GOODS_STATUS\" INTEGER NOT NULL ," + // 4: goodsStatus
                "\"GOODS_DISABLE\" INTEGER NOT NULL ," + // 5: goodsDisable
                "\"GOODS_ID\" INTEGER NOT NULL ," + // 6: goodsID
                "\"KEY_ID\" INTEGER NOT NULL );"); // 7: keyID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGoodsNumber());
        stmt.bindLong(3, entity.getGoodsStock());
        stmt.bindLong(4, entity.getGoodsCapacity());
        stmt.bindLong(5, entity.getGoodsStatus());
        stmt.bindLong(6, entity.getGoodsDisable());
        stmt.bindLong(7, entity.getGoodsID());
        stmt.bindLong(8, entity.getKeyID());
    }

    @Override
    protected void attachEntity(GoodsInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GoodsInfo readEntity(Cursor cursor, int offset) {
        GoodsInfo entity = new GoodsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // goodsNumber
            cursor.getInt(offset + 2), // goodsStock
            cursor.getInt(offset + 3), // goodsCapacity
            cursor.getInt(offset + 4), // goodsStatus
            cursor.getInt(offset + 5), // goodsDisable
            cursor.getLong(offset + 6), // goodsID
            cursor.getLong(offset + 7) // keyID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GoodsInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsNumber(cursor.getInt(offset + 1));
        entity.setGoodsStock(cursor.getInt(offset + 2));
        entity.setGoodsCapacity(cursor.getInt(offset + 3));
        entity.setGoodsStatus(cursor.getInt(offset + 4));
        entity.setGoodsDisable(cursor.getInt(offset + 5));
        entity.setGoodsID(cursor.getLong(offset + 6));
        entity.setKeyID(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GoodsInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GoodsInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "goodsInfoList" to-many relationship of KeyInfo. */
    public List<GoodsInfo> _queryKeyInfo_GoodsInfoList(long keyID) {
        synchronized (this) {
            if (keyInfo_GoodsInfoListQuery == null) {
                QueryBuilder<GoodsInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.KeyID.eq(null));
                keyInfo_GoodsInfoListQuery = queryBuilder.build();
            }
        }
        Query<GoodsInfo> query = keyInfo_GoodsInfoListQuery.forCurrentThread();
        query.setParameter(0, keyID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getKeyInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCommodityInfoDao().getAllColumns());
            builder.append(" FROM GOODS_INFO T");
            builder.append(" LEFT JOIN KEY_INFO T0 ON T.\"KEY_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN COMMODITY_INFO T1 ON T.\"GOODS_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GoodsInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        GoodsInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        KeyInfo keyInfo = loadCurrentOther(daoSession.getKeyInfoDao(), cursor, offset);
         if(keyInfo != null) {
            entity.setKeyInfo(keyInfo);
        }
        offset += daoSession.getKeyInfoDao().getAllColumns().length;

        CommodityInfo commodityInfo = loadCurrentOther(daoSession.getCommodityInfoDao(), cursor, offset);
         if(commodityInfo != null) {
            entity.setCommodityInfo(commodityInfo);
        }

        return entity;    
    }

    public GoodsInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GoodsInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GoodsInfo> list = new ArrayList<GoodsInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GoodsInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GoodsInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

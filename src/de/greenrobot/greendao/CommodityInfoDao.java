package de.greenrobot.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.greendao.CommodityInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMODITY_INFO".
*/
public class CommodityInfoDao extends AbstractDao<CommodityInfo, Long> {

    public static final String TABLENAME = "COMMODITY_INFO";

    /**
     * Properties of entity CommodityInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GoodsCode = new Property(1, String.class, "goodsCode", false, "GOODS_CODE");
        public final static Property GoodsSerial = new Property(2, Integer.class, "goodsSerial", false, "GOODS_SERIAL");
        public final static Property CommType = new Property(3, int.class, "commType", false, "COMM_TYPE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Price = new Property(5, Integer.class, "price", false, "PRICE");
        public final static Property ImgPath = new Property(6, String.class, "imgPath", false, "IMG_PATH");
    };


    public CommodityInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CommodityInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMODITY_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GOODS_CODE\" TEXT NOT NULL ," + // 1: goodsCode
                "\"GOODS_SERIAL\" INTEGER," + // 2: goodsSerial
                "\"COMM_TYPE\" INTEGER NOT NULL ," + // 3: commType
                "\"NAME\" TEXT NOT NULL ," + // 4: name
                "\"PRICE\" INTEGER," + // 5: price
                "\"IMG_PATH\" TEXT);"); // 6: imgPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMODITY_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CommodityInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getGoodsCode());
 
        Integer goodsSerial = entity.getGoodsSerial();
        if (goodsSerial != null) {
            stmt.bindLong(3, goodsSerial);
        }
        stmt.bindLong(4, entity.getCommType());
        stmt.bindString(5, entity.getName());
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(6, price);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(7, imgPath);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CommodityInfo readEntity(Cursor cursor, int offset) {
        CommodityInfo entity = new CommodityInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // goodsCode
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // goodsSerial
            cursor.getInt(offset + 3), // commType
            cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // imgPath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CommodityInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsCode(cursor.getString(offset + 1));
        entity.setGoodsSerial(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCommType(cursor.getInt(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setImgPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CommodityInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CommodityInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package de.greenrobot.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.greendao.AdVerInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AD_VER_INFO".
*/
public class AdVerInfoDao extends AbstractDao<AdVerInfo, Long> {

    public static final String TABLENAME = "AD_VER_INFO";

    /**
     * Properties of entity AdVerInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdNumber = new Property(1, int.class, "adNumber", false, "AD_NUMBER");
        public final static Property SoureName = new Property(2, String.class, "soureName", false, "SOURE_NAME");
        public final static Property PathUrl = new Property(3, String.class, "pathUrl", false, "PATH_URL");
        public final static Property SoureType = new Property(4, String.class, "soureType", false, "SOURE_TYPE");
        public final static Property PlayTime = new Property(5, int.class, "playTime", false, "PLAY_TIME");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property FileDir = new Property(7, String.class, "fileDir", false, "FILE_DIR");
        public final static Property FileName = new Property(8, String.class, "fileName", false, "FILE_NAME");
    };


    public AdVerInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AdVerInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AD_VER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AD_NUMBER\" INTEGER NOT NULL ," + // 1: adNumber
                "\"SOURE_NAME\" TEXT NOT NULL ," + // 2: soureName
                "\"PATH_URL\" TEXT NOT NULL ," + // 3: pathUrl
                "\"SOURE_TYPE\" TEXT NOT NULL ," + // 4: soureType
                "\"PLAY_TIME\" INTEGER NOT NULL ," + // 5: playTime
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"FILE_DIR\" TEXT," + // 7: fileDir
                "\"FILE_NAME\" TEXT);"); // 8: fileName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AD_VER_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AdVerInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAdNumber());
        stmt.bindString(3, entity.getSoureName());
        stmt.bindString(4, entity.getPathUrl());
        stmt.bindString(5, entity.getSoureType());
        stmt.bindLong(6, entity.getPlayTime());
        stmt.bindLong(7, entity.getStatus());
 
        String fileDir = entity.getFileDir();
        if (fileDir != null) {
            stmt.bindString(8, fileDir);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(9, fileName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AdVerInfo readEntity(Cursor cursor, int offset) {
        AdVerInfo entity = new AdVerInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // adNumber
            cursor.getString(offset + 2), // soureName
            cursor.getString(offset + 3), // pathUrl
            cursor.getString(offset + 4), // soureType
            cursor.getInt(offset + 5), // playTime
            cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fileDir
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // fileName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AdVerInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdNumber(cursor.getInt(offset + 1));
        entity.setSoureName(cursor.getString(offset + 2));
        entity.setPathUrl(cursor.getString(offset + 3));
        entity.setSoureType(cursor.getString(offset + 4));
        entity.setPlayTime(cursor.getInt(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setFileDir(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AdVerInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AdVerInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
